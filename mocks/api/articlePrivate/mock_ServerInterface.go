// Code generated by mockery v2.52.4. DO NOT EDIT.

package articlePrivate

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// MockServerInterface is an autogenerated mock type for the ServerInterface type
type MockServerInterface struct {
	mock.Mock
}

type MockServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerInterface) EXPECT() *MockServerInterface_Expecter {
	return &MockServerInterface_Expecter{mock: &_m.Mock}
}

// ArticleCreatePost provides a mock function with given fields: ctx
func (_m *MockServerInterface) ArticleCreatePost(ctx echo.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ArticleCreatePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServerInterface_ArticleCreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArticleCreatePost'
type MockServerInterface_ArticleCreatePost_Call struct {
	*mock.Call
}

// ArticleCreatePost is a helper method to define mock.On call
//   - ctx echo.Context
func (_e *MockServerInterface_Expecter) ArticleCreatePost(ctx interface{}) *MockServerInterface_ArticleCreatePost_Call {
	return &MockServerInterface_ArticleCreatePost_Call{Call: _e.mock.On("ArticleCreatePost", ctx)}
}

func (_c *MockServerInterface_ArticleCreatePost_Call) Run(run func(ctx echo.Context)) *MockServerInterface_ArticleCreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockServerInterface_ArticleCreatePost_Call) Return(_a0 error) *MockServerInterface_ArticleCreatePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerInterface_ArticleCreatePost_Call) RunAndReturn(run func(echo.Context) error) *MockServerInterface_ArticleCreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// ArticleRevisionDetailGet provides a mock function with given fields: ctx, articleId, revisionId
func (_m *MockServerInterface) ArticleRevisionDetailGet(ctx echo.Context, articleId string, revisionId string) error {
	ret := _m.Called(ctx, articleId, revisionId)

	if len(ret) == 0 {
		panic("no return value specified for ArticleRevisionDetailGet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, string) error); ok {
		r0 = rf(ctx, articleId, revisionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServerInterface_ArticleRevisionDetailGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArticleRevisionDetailGet'
type MockServerInterface_ArticleRevisionDetailGet_Call struct {
	*mock.Call
}

// ArticleRevisionDetailGet is a helper method to define mock.On call
//   - ctx echo.Context
//   - articleId string
//   - revisionId string
func (_e *MockServerInterface_Expecter) ArticleRevisionDetailGet(ctx interface{}, articleId interface{}, revisionId interface{}) *MockServerInterface_ArticleRevisionDetailGet_Call {
	return &MockServerInterface_ArticleRevisionDetailGet_Call{Call: _e.mock.On("ArticleRevisionDetailGet", ctx, articleId, revisionId)}
}

func (_c *MockServerInterface_ArticleRevisionDetailGet_Call) Run(run func(ctx echo.Context, articleId string, revisionId string)) *MockServerInterface_ArticleRevisionDetailGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockServerInterface_ArticleRevisionDetailGet_Call) Return(_a0 error) *MockServerInterface_ArticleRevisionDetailGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerInterface_ArticleRevisionDetailGet_Call) RunAndReturn(run func(echo.Context, string, string) error) *MockServerInterface_ArticleRevisionDetailGet_Call {
	_c.Call.Return(run)
	return _c
}

// ArticleUpdatePut provides a mock function with given fields: ctx, articleId
func (_m *MockServerInterface) ArticleUpdatePut(ctx echo.Context, articleId string) error {
	ret := _m.Called(ctx, articleId)

	if len(ret) == 0 {
		panic("no return value specified for ArticleUpdatePut")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) error); ok {
		r0 = rf(ctx, articleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServerInterface_ArticleUpdatePut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArticleUpdatePut'
type MockServerInterface_ArticleUpdatePut_Call struct {
	*mock.Call
}

// ArticleUpdatePut is a helper method to define mock.On call
//   - ctx echo.Context
//   - articleId string
func (_e *MockServerInterface_Expecter) ArticleUpdatePut(ctx interface{}, articleId interface{}) *MockServerInterface_ArticleUpdatePut_Call {
	return &MockServerInterface_ArticleUpdatePut_Call{Call: _e.mock.On("ArticleUpdatePut", ctx, articleId)}
}

func (_c *MockServerInterface_ArticleUpdatePut_Call) Run(run func(ctx echo.Context, articleId string)) *MockServerInterface_ArticleUpdatePut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServerInterface_ArticleUpdatePut_Call) Return(_a0 error) *MockServerInterface_ArticleUpdatePut_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerInterface_ArticleUpdatePut_Call) RunAndReturn(run func(echo.Context, string) error) *MockServerInterface_ArticleUpdatePut_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServerInterface creates a new instance of MockServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerInterface {
	mock := &MockServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
