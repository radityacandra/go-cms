// Code generated by mockery v2.52.4. DO NOT EDIT.

package user

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// MockServerInterface is an autogenerated mock type for the ServerInterface type
type MockServerInterface struct {
	mock.Mock
}

type MockServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerInterface) EXPECT() *MockServerInterface_Expecter {
	return &MockServerInterface_Expecter{mock: &_m.Mock}
}

// UserPost provides a mock function with given fields: ctx
func (_m *MockServerInterface) UserPost(ctx echo.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UserPost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServerInterface_UserPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserPost'
type MockServerInterface_UserPost_Call struct {
	*mock.Call
}

// UserPost is a helper method to define mock.On call
//   - ctx echo.Context
func (_e *MockServerInterface_Expecter) UserPost(ctx interface{}) *MockServerInterface_UserPost_Call {
	return &MockServerInterface_UserPost_Call{Call: _e.mock.On("UserPost", ctx)}
}

func (_c *MockServerInterface_UserPost_Call) Run(run func(ctx echo.Context)) *MockServerInterface_UserPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockServerInterface_UserPost_Call) Return(_a0 error) *MockServerInterface_UserPost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerInterface_UserPost_Call) RunAndReturn(run func(echo.Context) error) *MockServerInterface_UserPost_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServerInterface creates a new instance of MockServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerInterface {
	mock := &MockServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
