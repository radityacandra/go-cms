// Code generated by mockery v2.52.4. DO NOT EDIT.

package user

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// MockEchoRouter is an autogenerated mock type for the EchoRouter type
type MockEchoRouter struct {
	mock.Mock
}

type MockEchoRouter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEchoRouter) EXPECT() *MockEchoRouter_Expecter {
	return &MockEchoRouter_Expecter{mock: &_m.Mock}
}

// CONNECT provides a mock function with given fields: path, h, m
func (_m *MockEchoRouter) CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route {
	_va := make([]interface{}, len(m))
	for _i := range m {
		_va[_i] = m[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, path, h)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CONNECT")
	}

	var r0 *echo.Route
	if rf, ok := ret.Get(0).(func(string, echo.HandlerFunc, ...echo.MiddlewareFunc) *echo.Route); ok {
		r0 = rf(path, h, m...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*echo.Route)
		}
	}

	return r0
}

// MockEchoRouter_CONNECT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CONNECT'
type MockEchoRouter_CONNECT_Call struct {
	*mock.Call
}

// CONNECT is a helper method to define mock.On call
//   - path string
//   - h echo.HandlerFunc
//   - m ...echo.MiddlewareFunc
func (_e *MockEchoRouter_Expecter) CONNECT(path interface{}, h interface{}, m ...interface{}) *MockEchoRouter_CONNECT_Call {
	return &MockEchoRouter_CONNECT_Call{Call: _e.mock.On("CONNECT",
		append([]interface{}{path, h}, m...)...)}
}

func (_c *MockEchoRouter_CONNECT_Call) Run(run func(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc)) *MockEchoRouter_CONNECT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]echo.MiddlewareFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(echo.MiddlewareFunc)
			}
		}
		run(args[0].(string), args[1].(echo.HandlerFunc), variadicArgs...)
	})
	return _c
}

func (_c *MockEchoRouter_CONNECT_Call) Return(_a0 *echo.Route) *MockEchoRouter_CONNECT_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoRouter_CONNECT_Call) RunAndReturn(run func(string, echo.HandlerFunc, ...echo.MiddlewareFunc) *echo.Route) *MockEchoRouter_CONNECT_Call {
	_c.Call.Return(run)
	return _c
}

// DELETE provides a mock function with given fields: path, h, m
func (_m *MockEchoRouter) DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route {
	_va := make([]interface{}, len(m))
	for _i := range m {
		_va[_i] = m[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, path, h)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DELETE")
	}

	var r0 *echo.Route
	if rf, ok := ret.Get(0).(func(string, echo.HandlerFunc, ...echo.MiddlewareFunc) *echo.Route); ok {
		r0 = rf(path, h, m...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*echo.Route)
		}
	}

	return r0
}

// MockEchoRouter_DELETE_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DELETE'
type MockEchoRouter_DELETE_Call struct {
	*mock.Call
}

// DELETE is a helper method to define mock.On call
//   - path string
//   - h echo.HandlerFunc
//   - m ...echo.MiddlewareFunc
func (_e *MockEchoRouter_Expecter) DELETE(path interface{}, h interface{}, m ...interface{}) *MockEchoRouter_DELETE_Call {
	return &MockEchoRouter_DELETE_Call{Call: _e.mock.On("DELETE",
		append([]interface{}{path, h}, m...)...)}
}

func (_c *MockEchoRouter_DELETE_Call) Run(run func(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc)) *MockEchoRouter_DELETE_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]echo.MiddlewareFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(echo.MiddlewareFunc)
			}
		}
		run(args[0].(string), args[1].(echo.HandlerFunc), variadicArgs...)
	})
	return _c
}

func (_c *MockEchoRouter_DELETE_Call) Return(_a0 *echo.Route) *MockEchoRouter_DELETE_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoRouter_DELETE_Call) RunAndReturn(run func(string, echo.HandlerFunc, ...echo.MiddlewareFunc) *echo.Route) *MockEchoRouter_DELETE_Call {
	_c.Call.Return(run)
	return _c
}

// GET provides a mock function with given fields: path, h, m
func (_m *MockEchoRouter) GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route {
	_va := make([]interface{}, len(m))
	for _i := range m {
		_va[_i] = m[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, path, h)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GET")
	}

	var r0 *echo.Route
	if rf, ok := ret.Get(0).(func(string, echo.HandlerFunc, ...echo.MiddlewareFunc) *echo.Route); ok {
		r0 = rf(path, h, m...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*echo.Route)
		}
	}

	return r0
}

// MockEchoRouter_GET_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GET'
type MockEchoRouter_GET_Call struct {
	*mock.Call
}

// GET is a helper method to define mock.On call
//   - path string
//   - h echo.HandlerFunc
//   - m ...echo.MiddlewareFunc
func (_e *MockEchoRouter_Expecter) GET(path interface{}, h interface{}, m ...interface{}) *MockEchoRouter_GET_Call {
	return &MockEchoRouter_GET_Call{Call: _e.mock.On("GET",
		append([]interface{}{path, h}, m...)...)}
}

func (_c *MockEchoRouter_GET_Call) Run(run func(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc)) *MockEchoRouter_GET_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]echo.MiddlewareFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(echo.MiddlewareFunc)
			}
		}
		run(args[0].(string), args[1].(echo.HandlerFunc), variadicArgs...)
	})
	return _c
}

func (_c *MockEchoRouter_GET_Call) Return(_a0 *echo.Route) *MockEchoRouter_GET_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoRouter_GET_Call) RunAndReturn(run func(string, echo.HandlerFunc, ...echo.MiddlewareFunc) *echo.Route) *MockEchoRouter_GET_Call {
	_c.Call.Return(run)
	return _c
}

// HEAD provides a mock function with given fields: path, h, m
func (_m *MockEchoRouter) HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route {
	_va := make([]interface{}, len(m))
	for _i := range m {
		_va[_i] = m[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, path, h)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HEAD")
	}

	var r0 *echo.Route
	if rf, ok := ret.Get(0).(func(string, echo.HandlerFunc, ...echo.MiddlewareFunc) *echo.Route); ok {
		r0 = rf(path, h, m...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*echo.Route)
		}
	}

	return r0
}

// MockEchoRouter_HEAD_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HEAD'
type MockEchoRouter_HEAD_Call struct {
	*mock.Call
}

// HEAD is a helper method to define mock.On call
//   - path string
//   - h echo.HandlerFunc
//   - m ...echo.MiddlewareFunc
func (_e *MockEchoRouter_Expecter) HEAD(path interface{}, h interface{}, m ...interface{}) *MockEchoRouter_HEAD_Call {
	return &MockEchoRouter_HEAD_Call{Call: _e.mock.On("HEAD",
		append([]interface{}{path, h}, m...)...)}
}

func (_c *MockEchoRouter_HEAD_Call) Run(run func(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc)) *MockEchoRouter_HEAD_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]echo.MiddlewareFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(echo.MiddlewareFunc)
			}
		}
		run(args[0].(string), args[1].(echo.HandlerFunc), variadicArgs...)
	})
	return _c
}

func (_c *MockEchoRouter_HEAD_Call) Return(_a0 *echo.Route) *MockEchoRouter_HEAD_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoRouter_HEAD_Call) RunAndReturn(run func(string, echo.HandlerFunc, ...echo.MiddlewareFunc) *echo.Route) *MockEchoRouter_HEAD_Call {
	_c.Call.Return(run)
	return _c
}

// OPTIONS provides a mock function with given fields: path, h, m
func (_m *MockEchoRouter) OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route {
	_va := make([]interface{}, len(m))
	for _i := range m {
		_va[_i] = m[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, path, h)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OPTIONS")
	}

	var r0 *echo.Route
	if rf, ok := ret.Get(0).(func(string, echo.HandlerFunc, ...echo.MiddlewareFunc) *echo.Route); ok {
		r0 = rf(path, h, m...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*echo.Route)
		}
	}

	return r0
}

// MockEchoRouter_OPTIONS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OPTIONS'
type MockEchoRouter_OPTIONS_Call struct {
	*mock.Call
}

// OPTIONS is a helper method to define mock.On call
//   - path string
//   - h echo.HandlerFunc
//   - m ...echo.MiddlewareFunc
func (_e *MockEchoRouter_Expecter) OPTIONS(path interface{}, h interface{}, m ...interface{}) *MockEchoRouter_OPTIONS_Call {
	return &MockEchoRouter_OPTIONS_Call{Call: _e.mock.On("OPTIONS",
		append([]interface{}{path, h}, m...)...)}
}

func (_c *MockEchoRouter_OPTIONS_Call) Run(run func(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc)) *MockEchoRouter_OPTIONS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]echo.MiddlewareFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(echo.MiddlewareFunc)
			}
		}
		run(args[0].(string), args[1].(echo.HandlerFunc), variadicArgs...)
	})
	return _c
}

func (_c *MockEchoRouter_OPTIONS_Call) Return(_a0 *echo.Route) *MockEchoRouter_OPTIONS_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoRouter_OPTIONS_Call) RunAndReturn(run func(string, echo.HandlerFunc, ...echo.MiddlewareFunc) *echo.Route) *MockEchoRouter_OPTIONS_Call {
	_c.Call.Return(run)
	return _c
}

// PATCH provides a mock function with given fields: path, h, m
func (_m *MockEchoRouter) PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route {
	_va := make([]interface{}, len(m))
	for _i := range m {
		_va[_i] = m[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, path, h)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PATCH")
	}

	var r0 *echo.Route
	if rf, ok := ret.Get(0).(func(string, echo.HandlerFunc, ...echo.MiddlewareFunc) *echo.Route); ok {
		r0 = rf(path, h, m...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*echo.Route)
		}
	}

	return r0
}

// MockEchoRouter_PATCH_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PATCH'
type MockEchoRouter_PATCH_Call struct {
	*mock.Call
}

// PATCH is a helper method to define mock.On call
//   - path string
//   - h echo.HandlerFunc
//   - m ...echo.MiddlewareFunc
func (_e *MockEchoRouter_Expecter) PATCH(path interface{}, h interface{}, m ...interface{}) *MockEchoRouter_PATCH_Call {
	return &MockEchoRouter_PATCH_Call{Call: _e.mock.On("PATCH",
		append([]interface{}{path, h}, m...)...)}
}

func (_c *MockEchoRouter_PATCH_Call) Run(run func(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc)) *MockEchoRouter_PATCH_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]echo.MiddlewareFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(echo.MiddlewareFunc)
			}
		}
		run(args[0].(string), args[1].(echo.HandlerFunc), variadicArgs...)
	})
	return _c
}

func (_c *MockEchoRouter_PATCH_Call) Return(_a0 *echo.Route) *MockEchoRouter_PATCH_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoRouter_PATCH_Call) RunAndReturn(run func(string, echo.HandlerFunc, ...echo.MiddlewareFunc) *echo.Route) *MockEchoRouter_PATCH_Call {
	_c.Call.Return(run)
	return _c
}

// POST provides a mock function with given fields: path, h, m
func (_m *MockEchoRouter) POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route {
	_va := make([]interface{}, len(m))
	for _i := range m {
		_va[_i] = m[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, path, h)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for POST")
	}

	var r0 *echo.Route
	if rf, ok := ret.Get(0).(func(string, echo.HandlerFunc, ...echo.MiddlewareFunc) *echo.Route); ok {
		r0 = rf(path, h, m...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*echo.Route)
		}
	}

	return r0
}

// MockEchoRouter_POST_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'POST'
type MockEchoRouter_POST_Call struct {
	*mock.Call
}

// POST is a helper method to define mock.On call
//   - path string
//   - h echo.HandlerFunc
//   - m ...echo.MiddlewareFunc
func (_e *MockEchoRouter_Expecter) POST(path interface{}, h interface{}, m ...interface{}) *MockEchoRouter_POST_Call {
	return &MockEchoRouter_POST_Call{Call: _e.mock.On("POST",
		append([]interface{}{path, h}, m...)...)}
}

func (_c *MockEchoRouter_POST_Call) Run(run func(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc)) *MockEchoRouter_POST_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]echo.MiddlewareFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(echo.MiddlewareFunc)
			}
		}
		run(args[0].(string), args[1].(echo.HandlerFunc), variadicArgs...)
	})
	return _c
}

func (_c *MockEchoRouter_POST_Call) Return(_a0 *echo.Route) *MockEchoRouter_POST_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoRouter_POST_Call) RunAndReturn(run func(string, echo.HandlerFunc, ...echo.MiddlewareFunc) *echo.Route) *MockEchoRouter_POST_Call {
	_c.Call.Return(run)
	return _c
}

// PUT provides a mock function with given fields: path, h, m
func (_m *MockEchoRouter) PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route {
	_va := make([]interface{}, len(m))
	for _i := range m {
		_va[_i] = m[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, path, h)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PUT")
	}

	var r0 *echo.Route
	if rf, ok := ret.Get(0).(func(string, echo.HandlerFunc, ...echo.MiddlewareFunc) *echo.Route); ok {
		r0 = rf(path, h, m...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*echo.Route)
		}
	}

	return r0
}

// MockEchoRouter_PUT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PUT'
type MockEchoRouter_PUT_Call struct {
	*mock.Call
}

// PUT is a helper method to define mock.On call
//   - path string
//   - h echo.HandlerFunc
//   - m ...echo.MiddlewareFunc
func (_e *MockEchoRouter_Expecter) PUT(path interface{}, h interface{}, m ...interface{}) *MockEchoRouter_PUT_Call {
	return &MockEchoRouter_PUT_Call{Call: _e.mock.On("PUT",
		append([]interface{}{path, h}, m...)...)}
}

func (_c *MockEchoRouter_PUT_Call) Run(run func(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc)) *MockEchoRouter_PUT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]echo.MiddlewareFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(echo.MiddlewareFunc)
			}
		}
		run(args[0].(string), args[1].(echo.HandlerFunc), variadicArgs...)
	})
	return _c
}

func (_c *MockEchoRouter_PUT_Call) Return(_a0 *echo.Route) *MockEchoRouter_PUT_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoRouter_PUT_Call) RunAndReturn(run func(string, echo.HandlerFunc, ...echo.MiddlewareFunc) *echo.Route) *MockEchoRouter_PUT_Call {
	_c.Call.Return(run)
	return _c
}

// TRACE provides a mock function with given fields: path, h, m
func (_m *MockEchoRouter) TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route {
	_va := make([]interface{}, len(m))
	for _i := range m {
		_va[_i] = m[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, path, h)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TRACE")
	}

	var r0 *echo.Route
	if rf, ok := ret.Get(0).(func(string, echo.HandlerFunc, ...echo.MiddlewareFunc) *echo.Route); ok {
		r0 = rf(path, h, m...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*echo.Route)
		}
	}

	return r0
}

// MockEchoRouter_TRACE_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TRACE'
type MockEchoRouter_TRACE_Call struct {
	*mock.Call
}

// TRACE is a helper method to define mock.On call
//   - path string
//   - h echo.HandlerFunc
//   - m ...echo.MiddlewareFunc
func (_e *MockEchoRouter_Expecter) TRACE(path interface{}, h interface{}, m ...interface{}) *MockEchoRouter_TRACE_Call {
	return &MockEchoRouter_TRACE_Call{Call: _e.mock.On("TRACE",
		append([]interface{}{path, h}, m...)...)}
}

func (_c *MockEchoRouter_TRACE_Call) Run(run func(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc)) *MockEchoRouter_TRACE_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]echo.MiddlewareFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(echo.MiddlewareFunc)
			}
		}
		run(args[0].(string), args[1].(echo.HandlerFunc), variadicArgs...)
	})
	return _c
}

func (_c *MockEchoRouter_TRACE_Call) Return(_a0 *echo.Route) *MockEchoRouter_TRACE_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoRouter_TRACE_Call) RunAndReturn(run func(string, echo.HandlerFunc, ...echo.MiddlewareFunc) *echo.Route) *MockEchoRouter_TRACE_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEchoRouter creates a new instance of MockEchoRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEchoRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEchoRouter {
	mock := &MockEchoRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
