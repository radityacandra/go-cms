// Code generated by mockery v2.52.4. DO NOT EDIT.

package article

import (
	echo "github.com/labstack/echo/v4"
	article "github.com/radityacandra/go-cms/api/article"

	mock "github.com/stretchr/testify/mock"
)

// MockServerInterface is an autogenerated mock type for the ServerInterface type
type MockServerInterface struct {
	mock.Mock
}

type MockServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerInterface) EXPECT() *MockServerInterface_Expecter {
	return &MockServerInterface_Expecter{mock: &_m.Mock}
}

// ArticleDetailGet provides a mock function with given fields: ctx, articleId
func (_m *MockServerInterface) ArticleDetailGet(ctx echo.Context, articleId string) error {
	ret := _m.Called(ctx, articleId)

	if len(ret) == 0 {
		panic("no return value specified for ArticleDetailGet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) error); ok {
		r0 = rf(ctx, articleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServerInterface_ArticleDetailGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArticleDetailGet'
type MockServerInterface_ArticleDetailGet_Call struct {
	*mock.Call
}

// ArticleDetailGet is a helper method to define mock.On call
//   - ctx echo.Context
//   - articleId string
func (_e *MockServerInterface_Expecter) ArticleDetailGet(ctx interface{}, articleId interface{}) *MockServerInterface_ArticleDetailGet_Call {
	return &MockServerInterface_ArticleDetailGet_Call{Call: _e.mock.On("ArticleDetailGet", ctx, articleId)}
}

func (_c *MockServerInterface_ArticleDetailGet_Call) Run(run func(ctx echo.Context, articleId string)) *MockServerInterface_ArticleDetailGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServerInterface_ArticleDetailGet_Call) Return(_a0 error) *MockServerInterface_ArticleDetailGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerInterface_ArticleDetailGet_Call) RunAndReturn(run func(echo.Context, string) error) *MockServerInterface_ArticleDetailGet_Call {
	_c.Call.Return(run)
	return _c
}

// ArticleListGet provides a mock function with given fields: ctx, params
func (_m *MockServerInterface) ArticleListGet(ctx echo.Context, params article.ArticleListGetParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ArticleListGet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, article.ArticleListGetParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServerInterface_ArticleListGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArticleListGet'
type MockServerInterface_ArticleListGet_Call struct {
	*mock.Call
}

// ArticleListGet is a helper method to define mock.On call
//   - ctx echo.Context
//   - params article.ArticleListGetParams
func (_e *MockServerInterface_Expecter) ArticleListGet(ctx interface{}, params interface{}) *MockServerInterface_ArticleListGet_Call {
	return &MockServerInterface_ArticleListGet_Call{Call: _e.mock.On("ArticleListGet", ctx, params)}
}

func (_c *MockServerInterface_ArticleListGet_Call) Run(run func(ctx echo.Context, params article.ArticleListGetParams)) *MockServerInterface_ArticleListGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context), args[1].(article.ArticleListGetParams))
	})
	return _c
}

func (_c *MockServerInterface_ArticleListGet_Call) Return(_a0 error) *MockServerInterface_ArticleListGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerInterface_ArticleListGet_Call) RunAndReturn(run func(echo.Context, article.ArticleListGetParams) error) *MockServerInterface_ArticleListGet_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServerInterface creates a new instance of MockServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerInterface {
	mock := &MockServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
