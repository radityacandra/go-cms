// Code generated by mockery v2.52.4. DO NOT EDIT.

package repository

import (
	context "context"

	database "github.com/radityacandra/go-cms/pkg/database"
	mock "github.com/stretchr/testify/mock"

	model "github.com/radityacandra/go-cms/internal/application/user/model"

	types "github.com/radityacandra/go-cms/internal/application/user/types"
)

// MockIRepository is an autogenerated mock type for the IRepository type
type MockIRepository struct {
	mock.Mock
}

type MockIRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRepository) EXPECT() *MockIRepository_Expecter {
	return &MockIRepository_Expecter{mock: &_m.Mock}
}

// BeginTransaction provides a mock function with given fields: ctx
func (_m *MockIRepository) BeginTransaction(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRepository_BeginTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTransaction'
type MockIRepository_BeginTransaction_Call struct {
	*mock.Call
}

// BeginTransaction is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIRepository_Expecter) BeginTransaction(ctx interface{}) *MockIRepository_BeginTransaction_Call {
	return &MockIRepository_BeginTransaction_Call{Call: _e.mock.On("BeginTransaction", ctx)}
}

func (_c *MockIRepository_BeginTransaction_Call) Run(run func(ctx context.Context)) *MockIRepository_BeginTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIRepository_BeginTransaction_Call) Return(_a0 context.Context, _a1 error) *MockIRepository_BeginTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRepository_BeginTransaction_Call) RunAndReturn(run func(context.Context) (context.Context, error)) *MockIRepository_BeginTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// CommitOrRollbackTransaction provides a mock function with given fields: ctx, err
func (_m *MockIRepository) CommitOrRollbackTransaction(ctx context.Context, err error) error {
	ret := _m.Called(ctx, err)

	if len(ret) == 0 {
		panic("no return value specified for CommitOrRollbackTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, error) error); ok {
		r0 = rf(ctx, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_CommitOrRollbackTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitOrRollbackTransaction'
type MockIRepository_CommitOrRollbackTransaction_Call struct {
	*mock.Call
}

// CommitOrRollbackTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - err error
func (_e *MockIRepository_Expecter) CommitOrRollbackTransaction(ctx interface{}, err interface{}) *MockIRepository_CommitOrRollbackTransaction_Call {
	return &MockIRepository_CommitOrRollbackTransaction_Call{Call: _e.mock.On("CommitOrRollbackTransaction", ctx, err)}
}

func (_c *MockIRepository_CommitOrRollbackTransaction_Call) Run(run func(ctx context.Context, err error)) *MockIRepository_CommitOrRollbackTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(error))
	})
	return _c
}

func (_c *MockIRepository_CommitOrRollbackTransaction_Call) Return(_a0 error) *MockIRepository_CommitOrRollbackTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_CommitOrRollbackTransaction_Call) RunAndReturn(run func(context.Context, error) error) *MockIRepository_CommitOrRollbackTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// FindRoleByName provides a mock function with given fields: ctx, roleName
func (_m *MockIRepository) FindRoleByName(ctx context.Context, roleName string) (*model.Role, error) {
	ret := _m.Called(ctx, roleName)

	if len(ret) == 0 {
		panic("no return value specified for FindRoleByName")
	}

	var r0 *model.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Role, error)); ok {
		return rf(ctx, roleName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Role); ok {
		r0 = rf(ctx, roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRepository_FindRoleByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindRoleByName'
type MockIRepository_FindRoleByName_Call struct {
	*mock.Call
}

// FindRoleByName is a helper method to define mock.On call
//   - ctx context.Context
//   - roleName string
func (_e *MockIRepository_Expecter) FindRoleByName(ctx interface{}, roleName interface{}) *MockIRepository_FindRoleByName_Call {
	return &MockIRepository_FindRoleByName_Call{Call: _e.mock.On("FindRoleByName", ctx, roleName)}
}

func (_c *MockIRepository_FindRoleByName_Call) Run(run func(ctx context.Context, roleName string)) *MockIRepository_FindRoleByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIRepository_FindRoleByName_Call) Return(_a0 *model.Role, _a1 error) *MockIRepository_FindRoleByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRepository_FindRoleByName_Call) RunAndReturn(run func(context.Context, string) (*model.Role, error)) *MockIRepository_FindRoleByName_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserById provides a mock function with given fields: ctx, userId
func (_m *MockIRepository) FindUserById(ctx context.Context, userId string) (*model.User, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for FindUserById")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRepository_FindUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserById'
type MockIRepository_FindUserById_Call struct {
	*mock.Call
}

// FindUserById is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *MockIRepository_Expecter) FindUserById(ctx interface{}, userId interface{}) *MockIRepository_FindUserById_Call {
	return &MockIRepository_FindUserById_Call{Call: _e.mock.On("FindUserById", ctx, userId)}
}

func (_c *MockIRepository_FindUserById_Call) Run(run func(ctx context.Context, userId string)) *MockIRepository_FindUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIRepository_FindUserById_Call) Return(_a0 *model.User, _a1 error) *MockIRepository_FindUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRepository_FindUserById_Call) RunAndReturn(run func(context.Context, string) (*model.User, error)) *MockIRepository_FindUserById_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByUsername provides a mock function with given fields: ctx, input
func (_m *MockIRepository) FindUserByUsername(ctx context.Context, input types.FindUserByUsernameInput) (*model.User, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByUsername")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.FindUserByUsernameInput) (*model.User, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.FindUserByUsernameInput) *model.User); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.FindUserByUsernameInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRepository_FindUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByUsername'
type MockIRepository_FindUserByUsername_Call struct {
	*mock.Call
}

// FindUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - input types.FindUserByUsernameInput
func (_e *MockIRepository_Expecter) FindUserByUsername(ctx interface{}, input interface{}) *MockIRepository_FindUserByUsername_Call {
	return &MockIRepository_FindUserByUsername_Call{Call: _e.mock.On("FindUserByUsername", ctx, input)}
}

func (_c *MockIRepository_FindUserByUsername_Call) Run(run func(ctx context.Context, input types.FindUserByUsernameInput)) *MockIRepository_FindUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.FindUserByUsernameInput))
	})
	return _c
}

func (_c *MockIRepository_FindUserByUsername_Call) Return(_a0 *model.User, _a1 error) *MockIRepository_FindUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRepository_FindUserByUsername_Call) RunAndReturn(run func(context.Context, types.FindUserByUsernameInput) (*model.User, error)) *MockIRepository_FindUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransaction provides a mock function with given fields: ctx
func (_m *MockIRepository) GetTransaction(ctx context.Context) database.QueryExecutor {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 database.QueryExecutor
	if rf, ok := ret.Get(0).(func(context.Context) database.QueryExecutor); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.QueryExecutor)
		}
	}

	return r0
}

// MockIRepository_GetTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransaction'
type MockIRepository_GetTransaction_Call struct {
	*mock.Call
}

// GetTransaction is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIRepository_Expecter) GetTransaction(ctx interface{}) *MockIRepository_GetTransaction_Call {
	return &MockIRepository_GetTransaction_Call{Call: _e.mock.On("GetTransaction", ctx)}
}

func (_c *MockIRepository_GetTransaction_Call) Run(run func(ctx context.Context)) *MockIRepository_GetTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIRepository_GetTransaction_Call) Return(_a0 database.QueryExecutor) *MockIRepository_GetTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_GetTransaction_Call) RunAndReturn(run func(context.Context) database.QueryExecutor) *MockIRepository_GetTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// InsertUser provides a mock function with given fields: ctx, input
func (_m *MockIRepository) InsertUser(ctx context.Context, input model.User) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for InsertUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_InsertUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertUser'
type MockIRepository_InsertUser_Call struct {
	*mock.Call
}

// InsertUser is a helper method to define mock.On call
//   - ctx context.Context
//   - input model.User
func (_e *MockIRepository_Expecter) InsertUser(ctx interface{}, input interface{}) *MockIRepository_InsertUser_Call {
	return &MockIRepository_InsertUser_Call{Call: _e.mock.On("InsertUser", ctx, input)}
}

func (_c *MockIRepository_InsertUser_Call) Run(run func(ctx context.Context, input model.User)) *MockIRepository_InsertUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *MockIRepository_InsertUser_Call) Return(_a0 error) *MockIRepository_InsertUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_InsertUser_Call) RunAndReturn(run func(context.Context, model.User) error) *MockIRepository_InsertUser_Call {
	_c.Call.Return(run)
	return _c
}

// InsertUserRole provides a mock function with given fields: ctx, userRole
func (_m *MockIRepository) InsertUserRole(ctx context.Context, userRole model.UserRole) error {
	ret := _m.Called(ctx, userRole)

	if len(ret) == 0 {
		panic("no return value specified for InsertUserRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserRole) error); ok {
		r0 = rf(ctx, userRole)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_InsertUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertUserRole'
type MockIRepository_InsertUserRole_Call struct {
	*mock.Call
}

// InsertUserRole is a helper method to define mock.On call
//   - ctx context.Context
//   - userRole model.UserRole
func (_e *MockIRepository_Expecter) InsertUserRole(ctx interface{}, userRole interface{}) *MockIRepository_InsertUserRole_Call {
	return &MockIRepository_InsertUserRole_Call{Call: _e.mock.On("InsertUserRole", ctx, userRole)}
}

func (_c *MockIRepository_InsertUserRole_Call) Run(run func(ctx context.Context, userRole model.UserRole)) *MockIRepository_InsertUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserRole))
	})
	return _c
}

func (_c *MockIRepository_InsertUserRole_Call) Return(_a0 error) *MockIRepository_InsertUserRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_InsertUserRole_Call) RunAndReturn(run func(context.Context, model.UserRole) error) *MockIRepository_InsertUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// IsTransaction provides a mock function with given fields: ctx
func (_m *MockIRepository) IsTransaction(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsTransaction")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockIRepository_IsTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTransaction'
type MockIRepository_IsTransaction_Call struct {
	*mock.Call
}

// IsTransaction is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIRepository_Expecter) IsTransaction(ctx interface{}) *MockIRepository_IsTransaction_Call {
	return &MockIRepository_IsTransaction_Call{Call: _e.mock.On("IsTransaction", ctx)}
}

func (_c *MockIRepository_IsTransaction_Call) Run(run func(ctx context.Context)) *MockIRepository_IsTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIRepository_IsTransaction_Call) Return(_a0 bool) *MockIRepository_IsTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_IsTransaction_Call) RunAndReturn(run func(context.Context) bool) *MockIRepository_IsTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIRepository creates a new instance of MockIRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRepository {
	mock := &MockIRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
