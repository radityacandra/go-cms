// Code generated by mockery v2.52.4. DO NOT EDIT.

package service

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/radityacandra/go-cms/internal/application/auth/types"
)

// MockIService is an autogenerated mock type for the IService type
type MockIService struct {
	mock.Mock
}

type MockIService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIService) EXPECT() *MockIService_Expecter {
	return &MockIService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, input
func (_m *MockIService) Login(ctx context.Context, input types.LoginInput) (types.LoginOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 types.LoginOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.LoginInput) (types.LoginOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.LoginInput) types.LoginOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(types.LoginOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.LoginInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockIService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - input types.LoginInput
func (_e *MockIService_Expecter) Login(ctx interface{}, input interface{}) *MockIService_Login_Call {
	return &MockIService_Login_Call{Call: _e.mock.On("Login", ctx, input)}
}

func (_c *MockIService_Login_Call) Run(run func(ctx context.Context, input types.LoginInput)) *MockIService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.LoginInput))
	})
	return _c
}

func (_c *MockIService_Login_Call) Return(_a0 types.LoginOutput, _a1 error) *MockIService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIService_Login_Call) RunAndReturn(run func(context.Context, types.LoginInput) (types.LoginOutput, error)) *MockIService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIService creates a new instance of MockIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIService {
	mock := &MockIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
