// Code generated by mockery v2.52.4. DO NOT EDIT.

package repository

import (
	context "context"

	database "github.com/radityacandra/go-cms/pkg/database"
	mock "github.com/stretchr/testify/mock"

	model "github.com/radityacandra/go-cms/internal/application/article/model"

	types "github.com/radityacandra/go-cms/internal/application/article/types"
)

// MockIRepository is an autogenerated mock type for the IRepository type
type MockIRepository struct {
	mock.Mock
}

type MockIRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRepository) EXPECT() *MockIRepository_Expecter {
	return &MockIRepository_Expecter{mock: &_m.Mock}
}

// BeginTransaction provides a mock function with given fields: ctx
func (_m *MockIRepository) BeginTransaction(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRepository_BeginTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTransaction'
type MockIRepository_BeginTransaction_Call struct {
	*mock.Call
}

// BeginTransaction is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIRepository_Expecter) BeginTransaction(ctx interface{}) *MockIRepository_BeginTransaction_Call {
	return &MockIRepository_BeginTransaction_Call{Call: _e.mock.On("BeginTransaction", ctx)}
}

func (_c *MockIRepository_BeginTransaction_Call) Run(run func(ctx context.Context)) *MockIRepository_BeginTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIRepository_BeginTransaction_Call) Return(_a0 context.Context, _a1 error) *MockIRepository_BeginTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRepository_BeginTransaction_Call) RunAndReturn(run func(context.Context) (context.Context, error)) *MockIRepository_BeginTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// CommitOrRollbackTransaction provides a mock function with given fields: ctx, err
func (_m *MockIRepository) CommitOrRollbackTransaction(ctx context.Context, err error) error {
	ret := _m.Called(ctx, err)

	if len(ret) == 0 {
		panic("no return value specified for CommitOrRollbackTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, error) error); ok {
		r0 = rf(ctx, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_CommitOrRollbackTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitOrRollbackTransaction'
type MockIRepository_CommitOrRollbackTransaction_Call struct {
	*mock.Call
}

// CommitOrRollbackTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - err error
func (_e *MockIRepository_Expecter) CommitOrRollbackTransaction(ctx interface{}, err interface{}) *MockIRepository_CommitOrRollbackTransaction_Call {
	return &MockIRepository_CommitOrRollbackTransaction_Call{Call: _e.mock.On("CommitOrRollbackTransaction", ctx, err)}
}

func (_c *MockIRepository_CommitOrRollbackTransaction_Call) Run(run func(ctx context.Context, err error)) *MockIRepository_CommitOrRollbackTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(error))
	})
	return _c
}

func (_c *MockIRepository_CommitOrRollbackTransaction_Call) Return(_a0 error) *MockIRepository_CommitOrRollbackTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_CommitOrRollbackTransaction_Call) RunAndReturn(run func(context.Context, error) error) *MockIRepository_CommitOrRollbackTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// CreateArticle provides a mock function with given fields: ctx, input
func (_m *MockIRepository) CreateArticle(ctx context.Context, input model.Article) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateArticle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Article) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_CreateArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateArticle'
type MockIRepository_CreateArticle_Call struct {
	*mock.Call
}

// CreateArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - input model.Article
func (_e *MockIRepository_Expecter) CreateArticle(ctx interface{}, input interface{}) *MockIRepository_CreateArticle_Call {
	return &MockIRepository_CreateArticle_Call{Call: _e.mock.On("CreateArticle", ctx, input)}
}

func (_c *MockIRepository_CreateArticle_Call) Run(run func(ctx context.Context, input model.Article)) *MockIRepository_CreateArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Article))
	})
	return _c
}

func (_c *MockIRepository_CreateArticle_Call) Return(_a0 error) *MockIRepository_CreateArticle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_CreateArticle_Call) RunAndReturn(run func(context.Context, model.Article) error) *MockIRepository_CreateArticle_Call {
	_c.Call.Return(run)
	return _c
}

// FindArticleByIdAndOptionalStatus provides a mock function with given fields: ctx, articleId, status
func (_m *MockIRepository) FindArticleByIdAndOptionalStatus(ctx context.Context, articleId string, status string) (*model.Article, error) {
	ret := _m.Called(ctx, articleId, status)

	if len(ret) == 0 {
		panic("no return value specified for FindArticleByIdAndOptionalStatus")
	}

	var r0 *model.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.Article, error)); ok {
		return rf(ctx, articleId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Article); ok {
		r0 = rf(ctx, articleId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, articleId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRepository_FindArticleByIdAndOptionalStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindArticleByIdAndOptionalStatus'
type MockIRepository_FindArticleByIdAndOptionalStatus_Call struct {
	*mock.Call
}

// FindArticleByIdAndOptionalStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - articleId string
//   - status string
func (_e *MockIRepository_Expecter) FindArticleByIdAndOptionalStatus(ctx interface{}, articleId interface{}, status interface{}) *MockIRepository_FindArticleByIdAndOptionalStatus_Call {
	return &MockIRepository_FindArticleByIdAndOptionalStatus_Call{Call: _e.mock.On("FindArticleByIdAndOptionalStatus", ctx, articleId, status)}
}

func (_c *MockIRepository_FindArticleByIdAndOptionalStatus_Call) Run(run func(ctx context.Context, articleId string, status string)) *MockIRepository_FindArticleByIdAndOptionalStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIRepository_FindArticleByIdAndOptionalStatus_Call) Return(_a0 *model.Article, _a1 error) *MockIRepository_FindArticleByIdAndOptionalStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRepository_FindArticleByIdAndOptionalStatus_Call) RunAndReturn(run func(context.Context, string, string) (*model.Article, error)) *MockIRepository_FindArticleByIdAndOptionalStatus_Call {
	_c.Call.Return(run)
	return _c
}

// FindArticleRevisionByIdAndArticleId provides a mock function with given fields: ctx, articleId, id
func (_m *MockIRepository) FindArticleRevisionByIdAndArticleId(ctx context.Context, articleId string, id string) (*model.Article, error) {
	ret := _m.Called(ctx, articleId, id)

	if len(ret) == 0 {
		panic("no return value specified for FindArticleRevisionByIdAndArticleId")
	}

	var r0 *model.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.Article, error)); ok {
		return rf(ctx, articleId, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Article); ok {
		r0 = rf(ctx, articleId, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, articleId, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRepository_FindArticleRevisionByIdAndArticleId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindArticleRevisionByIdAndArticleId'
type MockIRepository_FindArticleRevisionByIdAndArticleId_Call struct {
	*mock.Call
}

// FindArticleRevisionByIdAndArticleId is a helper method to define mock.On call
//   - ctx context.Context
//   - articleId string
//   - id string
func (_e *MockIRepository_Expecter) FindArticleRevisionByIdAndArticleId(ctx interface{}, articleId interface{}, id interface{}) *MockIRepository_FindArticleRevisionByIdAndArticleId_Call {
	return &MockIRepository_FindArticleRevisionByIdAndArticleId_Call{Call: _e.mock.On("FindArticleRevisionByIdAndArticleId", ctx, articleId, id)}
}

func (_c *MockIRepository_FindArticleRevisionByIdAndArticleId_Call) Run(run func(ctx context.Context, articleId string, id string)) *MockIRepository_FindArticleRevisionByIdAndArticleId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIRepository_FindArticleRevisionByIdAndArticleId_Call) Return(_a0 *model.Article, _a1 error) *MockIRepository_FindArticleRevisionByIdAndArticleId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRepository_FindArticleRevisionByIdAndArticleId_Call) RunAndReturn(run func(context.Context, string, string) (*model.Article, error)) *MockIRepository_FindArticleRevisionByIdAndArticleId_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransaction provides a mock function with given fields: ctx
func (_m *MockIRepository) GetTransaction(ctx context.Context) database.QueryExecutor {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 database.QueryExecutor
	if rf, ok := ret.Get(0).(func(context.Context) database.QueryExecutor); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.QueryExecutor)
		}
	}

	return r0
}

// MockIRepository_GetTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransaction'
type MockIRepository_GetTransaction_Call struct {
	*mock.Call
}

// GetTransaction is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIRepository_Expecter) GetTransaction(ctx interface{}) *MockIRepository_GetTransaction_Call {
	return &MockIRepository_GetTransaction_Call{Call: _e.mock.On("GetTransaction", ctx)}
}

func (_c *MockIRepository_GetTransaction_Call) Run(run func(ctx context.Context)) *MockIRepository_GetTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIRepository_GetTransaction_Call) Return(_a0 database.QueryExecutor) *MockIRepository_GetTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_GetTransaction_Call) RunAndReturn(run func(context.Context) database.QueryExecutor) *MockIRepository_GetTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// IsTransaction provides a mock function with given fields: ctx
func (_m *MockIRepository) IsTransaction(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsTransaction")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockIRepository_IsTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTransaction'
type MockIRepository_IsTransaction_Call struct {
	*mock.Call
}

// IsTransaction is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIRepository_Expecter) IsTransaction(ctx interface{}) *MockIRepository_IsTransaction_Call {
	return &MockIRepository_IsTransaction_Call{Call: _e.mock.On("IsTransaction", ctx)}
}

func (_c *MockIRepository_IsTransaction_Call) Run(run func(ctx context.Context)) *MockIRepository_IsTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIRepository_IsTransaction_Call) Return(_a0 bool) *MockIRepository_IsTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_IsTransaction_Call) RunAndReturn(run func(context.Context) bool) *MockIRepository_IsTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// ListArticle provides a mock function with given fields: ctx, input
func (_m *MockIRepository) ListArticle(ctx context.Context, input types.ListArticleInput) (types.ListArticleOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for ListArticle")
	}

	var r0 types.ListArticleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ListArticleInput) (types.ListArticleOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ListArticleInput) types.ListArticleOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(types.ListArticleOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ListArticleInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRepository_ListArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListArticle'
type MockIRepository_ListArticle_Call struct {
	*mock.Call
}

// ListArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - input types.ListArticleInput
func (_e *MockIRepository_Expecter) ListArticle(ctx interface{}, input interface{}) *MockIRepository_ListArticle_Call {
	return &MockIRepository_ListArticle_Call{Call: _e.mock.On("ListArticle", ctx, input)}
}

func (_c *MockIRepository_ListArticle_Call) Run(run func(ctx context.Context, input types.ListArticleInput)) *MockIRepository_ListArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ListArticleInput))
	})
	return _c
}

func (_c *MockIRepository_ListArticle_Call) Return(_a0 types.ListArticleOutput, _a1 error) *MockIRepository_ListArticle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRepository_ListArticle_Call) RunAndReturn(run func(context.Context, types.ListArticleInput) (types.ListArticleOutput, error)) *MockIRepository_ListArticle_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateArticle provides a mock function with given fields: ctx, input
func (_m *MockIRepository) UpdateArticle(ctx context.Context, input model.Article) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateArticle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Article) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_UpdateArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateArticle'
type MockIRepository_UpdateArticle_Call struct {
	*mock.Call
}

// UpdateArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - input model.Article
func (_e *MockIRepository_Expecter) UpdateArticle(ctx interface{}, input interface{}) *MockIRepository_UpdateArticle_Call {
	return &MockIRepository_UpdateArticle_Call{Call: _e.mock.On("UpdateArticle", ctx, input)}
}

func (_c *MockIRepository_UpdateArticle_Call) Run(run func(ctx context.Context, input model.Article)) *MockIRepository_UpdateArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Article))
	})
	return _c
}

func (_c *MockIRepository_UpdateArticle_Call) Return(_a0 error) *MockIRepository_UpdateArticle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_UpdateArticle_Call) RunAndReturn(run func(context.Context, model.Article) error) *MockIRepository_UpdateArticle_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIRepository creates a new instance of MockIRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRepository {
	mock := &MockIRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
