// Code generated by mockery v2.52.4. DO NOT EDIT.

package service

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/radityacandra/go-cms/internal/application/tag/types"
)

// MockIService is an autogenerated mock type for the IService type
type MockIService struct {
	mock.Mock
}

type MockIService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIService) EXPECT() *MockIService_Expecter {
	return &MockIService_Expecter{mock: &_m.Mock}
}

// CalculateTrendingScore provides a mock function with given fields: ctx, tagId
func (_m *MockIService) CalculateTrendingScore(ctx context.Context, tagId string) error {
	ret := _m.Called(ctx, tagId)

	if len(ret) == 0 {
		panic("no return value specified for CalculateTrendingScore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, tagId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIService_CalculateTrendingScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateTrendingScore'
type MockIService_CalculateTrendingScore_Call struct {
	*mock.Call
}

// CalculateTrendingScore is a helper method to define mock.On call
//   - ctx context.Context
//   - tagId string
func (_e *MockIService_Expecter) CalculateTrendingScore(ctx interface{}, tagId interface{}) *MockIService_CalculateTrendingScore_Call {
	return &MockIService_CalculateTrendingScore_Call{Call: _e.mock.On("CalculateTrendingScore", ctx, tagId)}
}

func (_c *MockIService_CalculateTrendingScore_Call) Run(run func(ctx context.Context, tagId string)) *MockIService_CalculateTrendingScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIService_CalculateTrendingScore_Call) Return(_a0 error) *MockIService_CalculateTrendingScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIService_CalculateTrendingScore_Call) RunAndReturn(run func(context.Context, string) error) *MockIService_CalculateTrendingScore_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTag provides a mock function with given fields: ctx, input
func (_m *MockIService) CreateTag(ctx context.Context, input types.CreateTagInput) (string, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateTag")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.CreateTagInput) (string, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.CreateTagInput) string); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.CreateTagInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIService_CreateTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTag'
type MockIService_CreateTag_Call struct {
	*mock.Call
}

// CreateTag is a helper method to define mock.On call
//   - ctx context.Context
//   - input types.CreateTagInput
func (_e *MockIService_Expecter) CreateTag(ctx interface{}, input interface{}) *MockIService_CreateTag_Call {
	return &MockIService_CreateTag_Call{Call: _e.mock.On("CreateTag", ctx, input)}
}

func (_c *MockIService_CreateTag_Call) Run(run func(ctx context.Context, input types.CreateTagInput)) *MockIService_CreateTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.CreateTagInput))
	})
	return _c
}

func (_c *MockIService_CreateTag_Call) Return(_a0 string, _a1 error) *MockIService_CreateTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIService_CreateTag_Call) RunAndReturn(run func(context.Context, types.CreateTagInput) (string, error)) *MockIService_CreateTag_Call {
	_c.Call.Return(run)
	return _c
}

// ListActiveTag provides a mock function with given fields: ctx
func (_m *MockIService) ListActiveTag(ctx context.Context) (types.ListActiveTagOutput, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListActiveTag")
	}

	var r0 types.ListActiveTagOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (types.ListActiveTagOutput, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) types.ListActiveTagOutput); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.ListActiveTagOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIService_ListActiveTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActiveTag'
type MockIService_ListActiveTag_Call struct {
	*mock.Call
}

// ListActiveTag is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIService_Expecter) ListActiveTag(ctx interface{}) *MockIService_ListActiveTag_Call {
	return &MockIService_ListActiveTag_Call{Call: _e.mock.On("ListActiveTag", ctx)}
}

func (_c *MockIService_ListActiveTag_Call) Run(run func(ctx context.Context)) *MockIService_ListActiveTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIService_ListActiveTag_Call) Return(_a0 types.ListActiveTagOutput, _a1 error) *MockIService_ListActiveTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIService_ListActiveTag_Call) RunAndReturn(run func(context.Context) (types.ListActiveTagOutput, error)) *MockIService_ListActiveTag_Call {
	_c.Call.Return(run)
	return _c
}

// ListTag provides a mock function with given fields: ctx, input
func (_m *MockIService) ListTag(ctx context.Context, input types.ListTagInput) (types.ListTagOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for ListTag")
	}

	var r0 types.ListTagOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ListTagInput) (types.ListTagOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ListTagInput) types.ListTagOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(types.ListTagOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ListTagInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIService_ListTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTag'
type MockIService_ListTag_Call struct {
	*mock.Call
}

// ListTag is a helper method to define mock.On call
//   - ctx context.Context
//   - input types.ListTagInput
func (_e *MockIService_Expecter) ListTag(ctx interface{}, input interface{}) *MockIService_ListTag_Call {
	return &MockIService_ListTag_Call{Call: _e.mock.On("ListTag", ctx, input)}
}

func (_c *MockIService_ListTag_Call) Run(run func(ctx context.Context, input types.ListTagInput)) *MockIService_ListTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ListTagInput))
	})
	return _c
}

func (_c *MockIService_ListTag_Call) Return(_a0 types.ListTagOutput, _a1 error) *MockIService_ListTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIService_ListTag_Call) RunAndReturn(run func(context.Context, types.ListTagInput) (types.ListTagOutput, error)) *MockIService_ListTag_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIService creates a new instance of MockIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIService {
	mock := &MockIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
