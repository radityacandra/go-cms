// Code generated by mockery v2.52.4. DO NOT EDIT.

package database

import (
	context "context"

	database "github.com/radityacandra/go-cms/pkg/database"
	mock "github.com/stretchr/testify/mock"
)

// MockITransaction is an autogenerated mock type for the ITransaction type
type MockITransaction struct {
	mock.Mock
}

type MockITransaction_Expecter struct {
	mock *mock.Mock
}

func (_m *MockITransaction) EXPECT() *MockITransaction_Expecter {
	return &MockITransaction_Expecter{mock: &_m.Mock}
}

// BeginTransaction provides a mock function with given fields: ctx
func (_m *MockITransaction) BeginTransaction(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockITransaction_BeginTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTransaction'
type MockITransaction_BeginTransaction_Call struct {
	*mock.Call
}

// BeginTransaction is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockITransaction_Expecter) BeginTransaction(ctx interface{}) *MockITransaction_BeginTransaction_Call {
	return &MockITransaction_BeginTransaction_Call{Call: _e.mock.On("BeginTransaction", ctx)}
}

func (_c *MockITransaction_BeginTransaction_Call) Run(run func(ctx context.Context)) *MockITransaction_BeginTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockITransaction_BeginTransaction_Call) Return(_a0 context.Context, _a1 error) *MockITransaction_BeginTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockITransaction_BeginTransaction_Call) RunAndReturn(run func(context.Context) (context.Context, error)) *MockITransaction_BeginTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// CommitOrRollbackTransaction provides a mock function with given fields: ctx, err
func (_m *MockITransaction) CommitOrRollbackTransaction(ctx context.Context, err error) error {
	ret := _m.Called(ctx, err)

	if len(ret) == 0 {
		panic("no return value specified for CommitOrRollbackTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, error) error); ok {
		r0 = rf(ctx, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockITransaction_CommitOrRollbackTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitOrRollbackTransaction'
type MockITransaction_CommitOrRollbackTransaction_Call struct {
	*mock.Call
}

// CommitOrRollbackTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - err error
func (_e *MockITransaction_Expecter) CommitOrRollbackTransaction(ctx interface{}, err interface{}) *MockITransaction_CommitOrRollbackTransaction_Call {
	return &MockITransaction_CommitOrRollbackTransaction_Call{Call: _e.mock.On("CommitOrRollbackTransaction", ctx, err)}
}

func (_c *MockITransaction_CommitOrRollbackTransaction_Call) Run(run func(ctx context.Context, err error)) *MockITransaction_CommitOrRollbackTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(error))
	})
	return _c
}

func (_c *MockITransaction_CommitOrRollbackTransaction_Call) Return(_a0 error) *MockITransaction_CommitOrRollbackTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockITransaction_CommitOrRollbackTransaction_Call) RunAndReturn(run func(context.Context, error) error) *MockITransaction_CommitOrRollbackTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransaction provides a mock function with given fields: ctx
func (_m *MockITransaction) GetTransaction(ctx context.Context) database.QueryExecutor {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 database.QueryExecutor
	if rf, ok := ret.Get(0).(func(context.Context) database.QueryExecutor); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.QueryExecutor)
		}
	}

	return r0
}

// MockITransaction_GetTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransaction'
type MockITransaction_GetTransaction_Call struct {
	*mock.Call
}

// GetTransaction is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockITransaction_Expecter) GetTransaction(ctx interface{}) *MockITransaction_GetTransaction_Call {
	return &MockITransaction_GetTransaction_Call{Call: _e.mock.On("GetTransaction", ctx)}
}

func (_c *MockITransaction_GetTransaction_Call) Run(run func(ctx context.Context)) *MockITransaction_GetTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockITransaction_GetTransaction_Call) Return(_a0 database.QueryExecutor) *MockITransaction_GetTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockITransaction_GetTransaction_Call) RunAndReturn(run func(context.Context) database.QueryExecutor) *MockITransaction_GetTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// IsTransaction provides a mock function with given fields: ctx
func (_m *MockITransaction) IsTransaction(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsTransaction")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockITransaction_IsTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTransaction'
type MockITransaction_IsTransaction_Call struct {
	*mock.Call
}

// IsTransaction is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockITransaction_Expecter) IsTransaction(ctx interface{}) *MockITransaction_IsTransaction_Call {
	return &MockITransaction_IsTransaction_Call{Call: _e.mock.On("IsTransaction", ctx)}
}

func (_c *MockITransaction_IsTransaction_Call) Run(run func(ctx context.Context)) *MockITransaction_IsTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockITransaction_IsTransaction_Call) Return(_a0 bool) *MockITransaction_IsTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockITransaction_IsTransaction_Call) RunAndReturn(run func(context.Context) bool) *MockITransaction_IsTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockITransaction creates a new instance of MockITransaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockITransaction(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockITransaction {
	mock := &MockITransaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
