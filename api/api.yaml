openapi: 3.0.0
info:
  title: Go CMS
  description: API to support headless CMS
  version: 1.0.0
tags:
  - name: auth
    description: Endpoints for authentication
  - name: users
    description: Endpoints on user domain
paths:
  /api/v1/users:
    post:
      tags:
        - users
      summary: Register a new user
      description: Register a new user for any authentication later
      operationId: UserPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPostRequest'
      responses:
        '200':
          description: Success - Returns detail of user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPostResponse'
        '400':
          description: Error - Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
  /api/v1/auth/login:
    post:
      tags:
        - auth
      summary: Authenticate user
      description: Authenticate user for resource authorization
      operationId: AuthLoginPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginRequest'
      responses:
        '200':
          description: Success - Returns detail of user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthLoginResponse'
        '400':
          description: Error - Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
  /api/v1/auth/userinfo:
    get:
      tags:
        - auth-private
      summary: Get user info
      description: Returns the username of the authenticated user
      operationId: AuthUserInfoGet
      security:
        - BearerAuth: ['get-profile']
      responses:
        '200':
          description: Success - Returns user profile information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUserInfoGetResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: |
        Authorization using header parameter with parameter name `Authorization`
        See: https://swagger.io/docs/specification/authentication/bearer-authentication/
      bearerFormat: Bearer <token>
  parameters:
    OptionalDescriptionParam:
      name: description
      in: query
      required: false
      description: search by job description
      schema:
        type: string
    OptionalLocationParam:
      name: location
      in: query
      required: false
      description: search by job location
      schema:
        type: string
    OptionalJobTypeParam:
      name: full_time
      in: query
      required: false
      description: search by job type
      schema:
        type: boolean
    OptionalPageParam:
      name: page
      in: query
      required: false
      description: paginate result
      schema:
        type: integer
      x-oapi-codegen-extra-tags:
        validate: omitempty,gt=0
    JobIdParam:
      name: job_id
      in: path
      required: true
      description: id of the job
      schema:
        type: string
      x-oapi-codegen-extra-tags:
        validate: required,uuid
  schemas:
    DefaultErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: error description
          example: failed to validate nama field
    UserPostRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: username of the user
          example: someuser
          x-oapi-codegen-extra-tags:
            validate: required
        password:
          type: string
          description: user password for authentication purpose
          example: somepassword
          x-oapi-codegen-extra-tags:
            validate: required
    UserPostResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: user id
          example: 1c678c91-3c68-4158-a682-f8dd25a83924
    AuthLoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: username of the user
          example: someuser
          x-oapi-codegen-extra-tags:
            validate: required
        password:
          type: string
          description: user password for authentication purpose
          example: somepassword
          x-oapi-codegen-extra-tags:
            validate: required
    AuthLoginResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: bearer token to be attached on any resources
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    AuthUserInfoGetResponse:
      type: object
      required:
        - username
        - scopes
      properties:
        username:
          type: string
          description: username of the authenticated user
          example: someuser
        scopes:
          type: array
          items:
            type: string
          description: allowed access scopes
          example:
            - get-profile
            - list-articles
