openapi: 3.0.0
info:
  title: Go CMS
  description: API to support headless CMS
  version: 1.0.0
tags:
  - name: auth
    description: Endpoints for authentication
  - name: users
    description: Endpoints on user domain
  - name: tags
    description: Endpoints on tag domain
paths:
  /api/v1/users:
    post:
      tags:
        - users
      summary: Register a new user
      description: Register a new user for any authentication later
      operationId: UserPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPostRequest'
      responses:
        '200':
          description: Success - Returns detail of user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPostResponse'
        '400':
          description: Error - Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
  /api/v1/auth/login:
    post:
      tags:
        - auth
      summary: Authenticate user
      description: Authenticate user for resource authorization
      operationId: AuthLoginPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginRequest'
      responses:
        '200':
          description: Success - Returns detail of user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthLoginResponse'
        '400':
          description: Error - Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
  /api/v1/auth/userinfo:
    get:
      tags:
        - auth-private
      summary: Get user info
      description: Returns the username of the authenticated user
      operationId: AuthUserInfoGet
      security:
        - BearerAuth: ['get-profile']
      responses:
        '200':
          description: Success - Returns user profile information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUserInfoGetResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
  /api/v1/articles:
    get:
      tags:
        - article-public
      summary: Get article list
      description: |
        Returns list of published articles for authenticated / non authenticated user.
        for non authenticated user, by default only returns published article
      operationId: ArticleListGet
      parameters:
        - $ref: '#/components/parameters/OptionalPageParams'
        - $ref: '#/components/parameters/OptionalPageSizeParams'
        - $ref: '#/components/parameters/OptionalStatusParams'
      responses:
        '200':
          description: Success - Returns user profile information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleListGetResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
    post:
      tags:
        - article-private
      summary: Create new article
      description: create new article. can be directly published or waiting for editorial depending the role
      operationId: ArticleCreatePost
      security:
        - BearerAuth: ['create-article', 'create-article-published']
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleCreatePostRequest'
      responses:
        '200':
          description: Success - Returns created article id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDOnlyResponseSchema'
        '400':
          description: Error - Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
  /api/v1/articles/{article_id}:
    get:
      tags:
        - article-public
      summary: Get article detail
      description: Returns the detail of a specific article by its ID
      operationId: ArticleDetailGet
      parameters:
        - $ref: '#/components/parameters/RequiredArticleIdParams'
      responses:
        '200':
          description: Success - Returns article detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleDetailGetResponse'
        '404':
          description: Not Found - Article does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
    put:
      tags:
        - article-private
      summary: Update article
      description: Update the title and content of an article by its ID
      operationId: ArticleUpdatePut
      security:
        - BearerAuth: ['update-article', 'update-article-published']
      parameters:
        - $ref: '#/components/parameters/RequiredArticleIdParams'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleUpdatePutRequest'
      responses:
        '200':
          description: Success - Returns created article revision id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDOnlyResponseSchema'
        '404':
          description: Not Found - Article does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
  /api/v1/articles/{article_id}/revisions/{revision_id}:
    get:
      tags:
        - article-private
      summary: Get article revision detail
      description: Returns the detail of a specific article revision by its ID
      operationId: ArticleRevisionDetailGet
      security:
        - BearerAuth: ['get-article-revision']
      parameters:
        - $ref: '#/components/parameters/RequiredArticleIdParams'
        - $ref: '#/components/parameters/RequiredRevisionIdParams'
      responses:
        '200':
          description: Success - Returns article revision detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleRevisionDetailGetResponse'
        '404':
          description: Not Found - Article or revision does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
  /api/v1/tags:
    post:
      tags:
        - tags
      summary: Create a new tag
      description: Create a new tag with a name
      operationId: TagCreatePost
      security:
        - BearerAuth: ['create-tag']
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreatePostRequest'
      responses:
        '200':
          description: Success - Returns created tag id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDOnlyResponseSchema'
        '400':
          description: Error - Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
    get:
      tags:
        - tags
      summary: Get tag list
      description: Returns a paginated list of tags
      operationId: TagListGet
      security:
        - BearerAuth: ['list-tag']
      parameters:
        - $ref: '#/components/parameters/OptionalPageParams'
        - $ref: '#/components/parameters/OptionalPageSizeParams'
      responses:
        '200':
          description: Success - Returns tag list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagListGetResponse'
        '400':
          description: Error - Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorResponse'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: |
        Authorization using header parameter with parameter name `Authorization`
        See: https://swagger.io/docs/specification/authentication/bearer-authentication/
      bearerFormat: Bearer <token>
  parameters:
    OptionalPageParams:
      name: page
      in: query
      required: false
      description: active page in pagination. default to 1
      example: 1
      schema:
        type: integer
      x-oapi-codegen-extra-tags:
        validate: omitempty,min=1
    OptionalPageSizeParams:
      name: page-size
      in: query
      required: false
      description: max number of data in the active page. default to 10
      example: 10
      schema:
        type: integer
      x-oapi-codegen-extra-tags:
        validate: omitempty,min=1
    OptionalStatusParams:
      name: status
      in: query
      required: false
      description: filter by article status. default to published for non authenticated user and all to authenticated one
      example: published
      schema:
        type: string
      x-oapi-codegen-extra-tags:
        validate: omitempty,oneof=drafted submitted published
    RequiredArticleIdParams:
      name: article_id
      in: path
      required: true
      description: ID of the article
      example: af7960fa-5e86-489a-84df-cca87a5553d0
      schema:
        type: string
    RequiredRevisionIdParams:
      name: revision_id
      in: path
      required: true
      description: ID of the revision
      example: 0cc6dbd9-d194-4e9b-bb3c-1df61b8fe409
      schema:
        type: string
  schemas:
    DefaultErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: error description
          example: failed to validate nama field
    UserPostRequest:
      type: object
      required:
        - username
        - password
        - fullName
      properties:
        username:
          type: string
          description: username of the user
          example: someuser
          x-oapi-codegen-extra-tags:
            validate: required
        password:
          type: string
          description: user password for authentication purpose
          example: somepassword
          x-oapi-codegen-extra-tags:
            validate: required
        fullName:
          type: string
          description: user full name
          example: John Doe
          x-oapi-codegen-extra-tags:
            validate: required
    UserPostResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: user id
          example: 1c678c91-3c68-4158-a682-f8dd25a83924
    AuthLoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: username of the user
          example: someuser
          x-oapi-codegen-extra-tags:
            validate: required
        password:
          type: string
          description: user password for authentication purpose
          example: somepassword
          x-oapi-codegen-extra-tags:
            validate: required
    AuthLoginResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: bearer token to be attached on any resources
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    AuthUserInfoGetResponse:
      type: object
      required:
        - username
        - scopes
      properties:
        username:
          type: string
          description: username of the authenticated user
          example: someuser
        scopes:
          type: array
          items:
            type: string
          description: allowed access scopes
          example:
            - get-profile
            - list-articles
    ArticleListGetResponse:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ArticleListGetResponseItem'
        pagination:
          $ref: '#/components/schemas/PaginationSchema'
    ArticleListGetResponseItem:
      type: object
      required:
        - id
        - title
        - content
        - author
        - status
      properties:
        id: 
          type: string
          description: id of the article
          example: 43558e76-cd03-4496-b5ae-b22b63d2356c
        title:
          type: string
          description: title of the article
          example: Some Article Title
        content:
          type: string
          description: content of the article. can contains escaped html
          example: <div id\="content"\>some content</div\>
        author:
          $ref: '#/components/schemas/AuthorSchema'
        status:
          type: string
          description: article publishing status
          example: drafted
    AuthorSchema:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: id of the user
          example: 9226c192-dba6-4e15-b5b3-0c9a983b5fe1
        name:
          type: string
          description: name of the user
          example: John Doe
    PaginationSchema:
      type: object
      required:
        - page
        - pageSize
        - totalData
      properties:
        page:
          type: integer
          format: int64
          description: current active page number (default to 1)
          example: 1
        pageSize:
          type: integer
          format: int64
          description: total data displayed on the page (default to 10)
          example: 10
        totalData:
          type: integer
          format: int64
          description: total number of data available. with formula of ceil(totalData / pageSize), can determine total page available
          example: 156
    ArticleTagsSchema:
      type: array
      items:
        type: string
        example: Art
      x-oapi-codegen-extra-tags:
        validate: omitempty,min=1,unique
    ArticleCreatePostRequest:
      type: object
      required:
        - content
        - title
        - status
      properties:
        title:
          type: string
          description: title of the article
          example: Some Article Title
          x-oapi-codegen-extra-tags:
            validate: required
        content:
          type: string
          description: content of the article. any contents with html tags are welcomed
          example: <p>some content</p>
          x-oapi-codegen-extra-tags:
            validate: required
        status:
          type: string
          description: publishing status of the article
          example: drafted
          x-oapi-codegen-extra-tags:
            validate: required,oneof=drafted submitted published
        tags:
          $ref: '#/components/schemas/ArticleTagsSchema'
    IDOnlyResponseSchema:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: ID of created object
          example: f51bec61-436f-4bc4-9d21-09b35a36eb95
    ArticleDetailGetResponse:
      type: object
      required:
        - id
        - title
        - content
        - author
        - revisionHistories
        - tags
      properties:
        id:
          type: string
          description: id of the article
          example: 9652528b-840b-4d80-9f7d-c70fb0f2f193
        title:
          type: string
          description: title of the article
          example: Some Article Title
        content:
          type: string
          description: content of the article
          example: <div id="content">some content</div>
        author:
          $ref: '#/components/schemas/AuthorSchema'
        editor:
          $ref: '#/components/schemas/AuthorSchema'
        revisionHistories:
          type: array
          description: historical article revision
          items:
            $ref: '#/components/schemas/RevisionHistorySchema'
        tags:
          $ref: '#/components/schemas/ArticleTagsSchema'
    ArticleUpdatePutRequest:
      type: object
      properties:
        title:
          type: string
          description: title of the article
          example: Updated Article Title
        content:
          type: string
          description: content of the article
          example: <p>updated content</p>
        status:
          type: string
          description: status of the article
          example: submitted
          x-oapi-codegen-extra-tags:
            validate: omitempty,oneof=drafted submitted published
        tags:
          $ref: '#/components/schemas/ArticleTagsSchema'
    RevisionHistorySchema:
      type: object
      required:
        - id
        - authorName
        - authorId
        - revisionTime
      properties:
        id:
          type: string
          description: id of the revision
          example: 0cc6dbd9-d194-4e9b-bb3c-1df61b8fe409
        authorName:
          type: string
          description: full name of the editor
          example: John Doe
        authorId:
          type: string
          description: user id of the editor
          example: 0a2ff21a-f27e-4227-860d-212f5faa1c37
        revisionTime:
          type: integer
          format: int64
          description: time which article is inactive (unix millisecond)
          example: 1750446402000
    ArticleRevisionDetailGetResponse:
      type: object
      required:
        - id
        - title
        - content
        - author
      properties:
        id:
          type: string
          description: id of the article
          example: 9652528b-840b-4d80-9f7d-c70fb0f2f193
        title:
          type: string
          description: title of the article
          example: Some Article Title
        content:
          type: string
          description: content of the article
          example: <div id="content">some content</div>
        author:
          $ref: '#/components/schemas/AuthorSchema'
        editor:
          $ref: '#/components/schemas/AuthorSchema'
    TagCreatePostRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: name of the tag
          example: Technology
          x-oapi-codegen-extra-tags:
            validate: required
    TagListGetResponse:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TagListGetResponseItem'
        pagination:
          $ref: '#/components/schemas/PaginationSchema'
    TagListGetResponseItem:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: id of the tag
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: name of the tag
          example: Technology