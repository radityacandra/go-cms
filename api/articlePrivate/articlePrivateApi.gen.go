// Package articlePrivate provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package articlePrivate

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	"github.com/radityacandra/go-cms/pkg/jwt"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// ArticleCreatePostRequest defines model for ArticleCreatePostRequest.
type ArticleCreatePostRequest struct {
	// Content content of the article. any contents with html tags are welcomed
	Content string `json:"content" validate:"required"`

	// Status publishing status of the article
	Status string             `json:"status" validate:"required,oneof=drafted submitted published"`
	Tags   *ArticleTagsSchema `json:"tags,omitempty" validate:"omitempty,min=1,unique"`

	// Title title of the article
	Title string `json:"title" validate:"required"`
}

// ArticleRevisionDetailGetResponse defines model for ArticleRevisionDetailGetResponse.
type ArticleRevisionDetailGetResponse struct {
	Author AuthorSchema `json:"author"`

	// Content content of the article
	Content string        `json:"content"`
	Editor  *AuthorSchema `json:"editor,omitempty"`

	// Id id of the article
	Id string `json:"id"`

	// Title title of the article
	Title string `json:"title"`
}

// ArticleTagsSchema defines model for ArticleTagsSchema.
type ArticleTagsSchema = []string

// ArticleUpdatePutRequest defines model for ArticleUpdatePutRequest.
type ArticleUpdatePutRequest struct {
	// Content content of the article
	Content *string `json:"content,omitempty"`

	// Status status of the article
	Status *string            `json:"status,omitempty" validate:"omitempty,oneof=drafted submitted published"`
	Tags   *ArticleTagsSchema `json:"tags,omitempty" validate:"omitempty,min=1,unique"`

	// Title title of the article
	Title *string `json:"title,omitempty"`
}

// AuthorSchema defines model for AuthorSchema.
type AuthorSchema struct {
	// Id id of the user
	Id string `json:"id"`

	// Name name of the user
	Name string `json:"name"`
}

// DefaultErrorResponse defines model for DefaultErrorResponse.
type DefaultErrorResponse struct {
	// Error error description
	Error string `json:"error"`
}

// IDOnlyResponseSchema defines model for IDOnlyResponseSchema.
type IDOnlyResponseSchema struct {
	// Id ID of created object
	Id string `json:"id"`
}

// RequiredArticleIdParams defines model for RequiredArticleIdParams.
type RequiredArticleIdParams = string

// RequiredRevisionIdParams defines model for RequiredRevisionIdParams.
type RequiredRevisionIdParams = string

// ArticleCreatePostJSONRequestBody defines body for ArticleCreatePost for application/json ContentType.
type ArticleCreatePostJSONRequestBody = ArticleCreatePostRequest

// ArticleUpdatePutJSONRequestBody defines body for ArticleUpdatePut for application/json ContentType.
type ArticleUpdatePutJSONRequestBody = ArticleUpdatePutRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create new article
	// (POST /api/v1/articles)
	ArticleCreatePost(ctx echo.Context) error
	// Update article
	// (PUT /api/v1/articles/{article_id})
	ArticleUpdatePut(ctx echo.Context, articleId RequiredArticleIdParams) error
	// Get article revision detail
	// (GET /api/v1/articles/{article_id}/revisions/{revision_id})
	ArticleRevisionDetailGet(ctx echo.Context, articleId RequiredArticleIdParams, revisionId RequiredRevisionIdParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ArticleCreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) ArticleCreatePost(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"create-article", "create-article-published"})

	if ok := jwt.ScopeCheck(ctx, []string{"create-article", "create-article-published"}); !ok {
		return nil
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ArticleCreatePost(ctx)
	return err
}

// ArticleUpdatePut converts echo context to params.
func (w *ServerInterfaceWrapper) ArticleUpdatePut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "article_id" -------------
	var articleId RequiredArticleIdParams

	err = runtime.BindStyledParameterWithOptions("simple", "article_id", ctx.Param("article_id"), &articleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter article_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{"update-article", "update-article-published"})

	if ok := jwt.ScopeCheck(ctx, []string{"update-article", "update-article-published"}); !ok {
		return nil
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ArticleUpdatePut(ctx, articleId)
	return err
}

// ArticleRevisionDetailGet converts echo context to params.
func (w *ServerInterfaceWrapper) ArticleRevisionDetailGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "article_id" -------------
	var articleId RequiredArticleIdParams

	err = runtime.BindStyledParameterWithOptions("simple", "article_id", ctx.Param("article_id"), &articleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter article_id: %s", err))
	}

	// ------------- Path parameter "revision_id" -------------
	var revisionId RequiredRevisionIdParams

	err = runtime.BindStyledParameterWithOptions("simple", "revision_id", ctx.Param("revision_id"), &revisionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{"get-article-revision"})

	if ok := jwt.ScopeCheck(ctx, []string{"get-article-revision"}); !ok {
		return nil
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ArticleRevisionDetailGet(ctx, articleId, revisionId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/articles", wrapper.ArticleCreatePost)
	router.PUT(baseURL+"/api/v1/articles/:article_id", wrapper.ArticleUpdatePut)
	router.GET(baseURL+"/api/v1/articles/:article_id/revisions/:revision_id", wrapper.ArticleRevisionDetailGet)

}
