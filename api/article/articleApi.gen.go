// Package article provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package article

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ArticleDetailGetResponse defines model for ArticleDetailGetResponse.
type ArticleDetailGetResponse struct {
	Author AuthorSchema `json:"author"`

	// Content content of the article
	Content string        `json:"content"`
	Editor  *AuthorSchema `json:"editor,omitempty"`

	// Id id of the article
	Id string `json:"id"`

	// RevisionHistories historical article revision
	RevisionHistories []RevisionHistorySchema `json:"revisionHistories"`

	// Title title of the article
	Title string `json:"title"`
}

// ArticleListGetResponse defines model for ArticleListGetResponse.
type ArticleListGetResponse struct {
	Data       []ArticleListGetResponseItem `json:"data"`
	Pagination PaginationSchema             `json:"pagination"`
}

// ArticleListGetResponseItem defines model for ArticleListGetResponseItem.
type ArticleListGetResponseItem struct {
	Author AuthorSchema `json:"author"`

	// Content content of the article. can contains escaped html
	Content string `json:"content"`

	// Id id of the article
	Id string `json:"id"`

	// Status article publishing status
	Status string `json:"status"`

	// Title title of the article
	Title string `json:"title"`
}

// AuthorSchema defines model for AuthorSchema.
type AuthorSchema struct {
	// Id id of the user
	Id string `json:"id"`

	// Name name of the user
	Name string `json:"name"`
}

// DefaultErrorResponse defines model for DefaultErrorResponse.
type DefaultErrorResponse struct {
	// Error error description
	Error string `json:"error"`
}

// PaginationSchema defines model for PaginationSchema.
type PaginationSchema struct {
	// Page current active page number (default to 1)
	Page int64 `json:"page"`

	// PageSize total data displayed on the page (default to 10)
	PageSize int64 `json:"pageSize"`

	// TotalData total number of data available. with formula of ceil(totalData / pageSize), can determine total page available
	TotalData int64 `json:"totalData"`
}

// RevisionHistorySchema defines model for RevisionHistorySchema.
type RevisionHistorySchema struct {
	// AuthorId user id of the editor
	AuthorId string `json:"authorId"`

	// AuthorName full name of the editor
	AuthorName string `json:"authorName"`

	// Id id of the revision
	Id string `json:"id"`

	// RevisionTime time which article is inactive (unix millisecond)
	RevisionTime int64 `json:"revisionTime"`
}

// OptionalPageParams defines model for OptionalPageParams.
type OptionalPageParams = int

// OptionalPageSizeParams defines model for OptionalPageSizeParams.
type OptionalPageSizeParams = int

// OptionalStatusParams defines model for OptionalStatusParams.
type OptionalStatusParams = string

// RequiredArticleIdParams defines model for RequiredArticleIdParams.
type RequiredArticleIdParams = string

// ArticleListGetParams defines parameters for ArticleListGet.
type ArticleListGetParams struct {
	// Page active page in pagination. default to 1
	Page *OptionalPageParams `form:"page,omitempty" json:"page,omitempty"`

	// PageSize max number of data in the active page. default to 10
	PageSize *OptionalPageSizeParams `form:"page-size,omitempty" json:"page-size,omitempty"`

	// Status filter by article status. default to published for non authenticated user and all to authenticated one
	Status *OptionalStatusParams `form:"status,omitempty" json:"status,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get article list
	// (GET /api/v1/articles)
	ArticleListGet(ctx echo.Context, params ArticleListGetParams) error
	// Get article detail
	// (GET /api/v1/articles/{article_id})
	ArticleDetailGet(ctx echo.Context, articleId RequiredArticleIdParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ArticleListGet converts echo context to params.
func (w *ServerInterfaceWrapper) ArticleListGet(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ArticleListGetParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page-size: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ArticleListGet(ctx, params)
	return err
}

// ArticleDetailGet converts echo context to params.
func (w *ServerInterfaceWrapper) ArticleDetailGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "article_id" -------------
	var articleId RequiredArticleIdParams

	err = runtime.BindStyledParameterWithOptions("simple", "article_id", ctx.Param("article_id"), &articleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter article_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ArticleDetailGet(ctx, articleId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/articles", wrapper.ArticleListGet)
	router.GET(baseURL+"/api/v1/articles/:article_id", wrapper.ArticleDetailGet)

}
