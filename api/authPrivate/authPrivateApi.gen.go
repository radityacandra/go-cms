// Package authPrivate provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package authPrivate

import (
	"github.com/labstack/echo/v4"
	"github.com/radityacandra/go-cms/pkg/jwt"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// AuthUserInfoGetResponse defines model for AuthUserInfoGetResponse.
type AuthUserInfoGetResponse struct {
	// Scopes allowed access scopes
	Scopes []string `json:"scopes"`

	// Username username of the authenticated user
	Username string `json:"username"`
}

// DefaultErrorResponse defines model for DefaultErrorResponse.
type DefaultErrorResponse struct {
	// Error error description
	Error string `json:"error"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get user info
	// (GET /api/v1/auth/userinfo)
	AuthUserInfoGet(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AuthUserInfoGet converts echo context to params.
func (w *ServerInterfaceWrapper) AuthUserInfoGet(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"get-profile"})

	if ok := jwt.ScopeCheck(ctx, []string{"get-profile"}); !ok {
		return nil
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthUserInfoGet(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/auth/userinfo", wrapper.AuthUserInfoGet)

}
